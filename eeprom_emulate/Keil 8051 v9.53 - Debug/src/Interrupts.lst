C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/30/2017 16:29:28 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src/Interrupts.OBJ
COMPILER INVOKED BY: Z:\home\daniel\Downloads\SimplicityStudio_v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/
                    -daniel/SimplicityStudio/v4_workspace/EFM8BB3_Blinky_2/src/Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGL
                    -EVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/daniel/SimplicityStudi
                    -o/v4_workspace/EFM8BB3_Blinky_2/inc;/home/daniel/Downloads/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//Device/shared
                    -/si8051base;/home/daniel/Downloads/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src/Inter
                    -rupts.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9                   
  10          // USER INCLUDES                        
  11          #include <SI_EFM8BB3_Register_Enums.h>
  12          
  13          //-----------------------------------------------------------------------------
  14          // Global VARIABLES
  15          //-----------------------------------------------------------------------------
  16          int LEDCOUNT = 0; //used to set some frequency in a "hacky" manner, resets at maxLen
  17          int maxLen=10; //Highest LEDCOUNT can reach
  18          //00: and 11: clear 10: or 01: add
  19          int commands[2][6]={  //opcode, opcode, digit, digit, digit, digit
  20                             {1,1,0,0,0,0}, //this resets the ALU
  21                             {0,1,1,1,1,1} //This subtracts one
  22          };
  23          
  24          int PC          =       0;
  25          //-----------------------------------------------------------------------------
  26          // Global CONSTANTS
  27          //-----------------------------------------------------------------------------
  28          
  29          //-----------------------------------------------------------------------------
  30          // TIMER2_ISR
  31          //-----------------------------------------------------------------------------
  32          //
  33          // TIMER2 ISR Content goes here. Remember to clear flag bits:
  34          // TMR2CN::TF2H (Timer # High Byte Overflow Flag)
  35          // TMR2CN::TF2L (Timer # Low Byte Overflow Flag)
  36          //
  37          // This routine changes the state of the LED whenever Timer2 overflows.
  38          //
  39          //-----------------------------------------------------------------------------
  40          
  41          
  42          SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn) //This is the interrupt for the timer, code here is run on every cl
             -ock cycle.
  43          {
  44   1              TMR2CN0_TF2H = 0;                  // Clear Timer2 interrupt flag
  45   1              if (LEDCOUNT==0){ //This emulates frequency
  46   2                      P0_B7=0; //This is the clock pin
  47   2                      if (PC<=16 && PC>0){ //subtracting occurs most of the time
  48   3                              P0_B0=commands[1][0]; //first digit of opcode
  49   3                          P0_B1=commands[1][1]; //second digit of opcode
  50   3                              P0_B2=commands[1][2]; //first digit of number
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/30/2017 16:29:28 PAGE 2   

  51   3                          P0_B3=commands[1][3]; //second digit
  52   3                          P0_B4=commands[1][4]; //third digit
  53   3                              P0_B6=commands[1][5]; //fourth digit
  54   3                              PC++; //counts up steps
  55   3                      }
  56   2                      else { //this is where resetting occurs
  57   3                              P0_B0=commands[0][0]; //first digit of opcode
  58   3                          P0_B1=commands[0][1]; //2nd
  59   3                              P0_B2=commands[0][2]; //first digit of number
  60   3                          P0_B3=commands[0][3]; //2nd
  61   3                          P0_B4=commands[0][4]; //3rd
  62   3                              P0_B6=commands[0][5]; //4th
  63   3                              PC++; //counts up steps
  64   3                      }
  65   2              }
  66   1              else if (LEDCOUNT==maxLen/2){
  67   2                      P0_B7=1; //Clock pin
  68   2              }
  69   1      
  70   1              if (LEDCOUNT>maxLen){
  71   2                      LEDCOUNT=0; //resets at max "frequency"
  72   2              }
  73   1              else {
  74   2                      LEDCOUNT++; //continues onwards in terms of "frequency"
  75   2              }
  76   1      }
  77          
  78          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    247    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
