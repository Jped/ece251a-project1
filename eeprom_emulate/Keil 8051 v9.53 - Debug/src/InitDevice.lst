C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/25/2017 23:58:57 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src/InitDevice.OBJ
COMPILER INVOKED BY: Z:\home\daniel\Downloads\SimplicityStudio_v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/
                    -daniel/SimplicityStudio/v4_workspace/EFM8BB3_Blinky_2/src/InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGL
                    -EVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/daniel/SimplicityStudi
                    -o/v4_workspace/EFM8BB3_Blinky_2/inc;/home/daniel/Downloads/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//Device/shared
                    -/si8051base;/home/daniel/Downloads/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src/InitD
                    -evice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              WDT_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_1_enter_DefaultMode_from_RESET();
  29   1              PBCFG_0_enter_DefaultMode_from_RESET();
  30   1              TIMER16_2_enter_DefaultMode_from_RESET();
  31   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  32   1              // Restore the SFRPAGE
  33   1              SFRPAGE = SFRPAGE_save;
  34   1              // [Config Calls]$
  35   1      
  36   1      }
  37          
  38          //================================================================================
  39          // WDT_0_enter_DefaultMode_from_RESET
  40          //================================================================================
  41          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  42   1              // $[WDTCN - Watchdog Timer Control]
  43   1              SFRPAGE = 0x00;
  44   1              //Disable Watchdog with key sequence
  45   1              WDTCN = 0xDE; //First key
  46   1              WDTCN = 0xAD; //Second key
  47   1              // [WDTCN - Watchdog Timer Control]$
  48   1      
  49   1      }
  50          
  51          //================================================================================
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/25/2017 23:58:57 PAGE 2   

  52          // PORTS_0_enter_DefaultMode_from_RESET
  53          //================================================================================
  54          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  55   1              // $[P0 - Port 0 Pin Latch]
  56   1              // [P0 - Port 0 Pin Latch]$
  57   1      
  58   1              // $[P0MDOUT - Port 0 Output Mode]
  59   1              /***********************************************************************
  60   1               - P0.0 output is open-drain
  61   1               - P0.1 output is open-drain
  62   1               - P0.2 output is open-drain
  63   1               - P0.3 output is open-drain
  64   1               - P0.4 output is push-pull
  65   1               - P0.5 output is push-pull
  66   1               - P0.6 output is open-drain
  67   1               - P0.7 output is open-drain
  68   1               ***********************************************************************/
  69   1              P0MDOUT = P0MDOUT_B0__PUSH_PULL | P0MDOUT_B1__PUSH_PULL
  70   1                              | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__PUSH_PULL
  71   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__PUSH_PULL
  72   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__PUSH_PULL;
  73   1              // [P0MDOUT - Port 0 Output Mode]$
  74   1      
  75   1              // $[P0MDIN - Port 0 Input Mode]
  76   1              // [P0MDIN - Port 0 Input Mode]$
  77   1      
  78   1              // $[P0SKIP - Port 0 Skip]
  79   1              /***********************************************************************
  80   1               - P0.0 pin is not skipped by the crossbar
  81   1               - P0.1 pin is not skipped by the crossbar
  82   1               - P0.2 pin is not skipped by the crossbar
  83   1               - P0.3 pin is not skipped by the crossbar
  84   1               - P0.4 pin is skipped by the crossbar
  85   1               - P0.5 pin is skipped by the crossbar
  86   1               - P0.6 pin is not skipped by the crossbar
  87   1               - P0.7 pin is not skipped by the crossbar
  88   1               ***********************************************************************/
  89   1              P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__NOT_SKIPPED
  90   1                              | P0SKIP_B2__NOT_SKIPPED | P0SKIP_B3__NOT_SKIPPED
  91   1                              | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED | P0SKIP_B6__NOT_SKIPPED
  92   1                              | P0SKIP_B7__NOT_SKIPPED;
  93   1              // [P0SKIP - Port 0 Skip]$
  94   1      
  95   1              // $[P0MASK - Port 0 Mask]
  96   1              // [P0MASK - Port 0 Mask]$
  97   1      
  98   1              // $[P0MAT - Port 0 Match]
  99   1              // [P0MAT - Port 0 Match]$
 100   1      
 101   1      }
 102          //================================================================================
 103          // PORTS_1_enter_DefaultMode_from_RESET
 104          //================================================================================
 105          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 106   1              // $[P1 - Port 1 Pin Latch]
 107   1              // [P1 - Port 1 Pin Latch]$
 108   1      
 109   1              // $[P1MDOUT - Port 1 Output Mode]
 110   1              /***********************************************************************
 111   1               - P1.0 output is open-drain
 112   1               - P1.1 output is open-drain
 113   1               - P1.2 output is open-drain
 114   1               - P1.3 output is open-drain
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/25/2017 23:58:57 PAGE 3   

 115   1               - P1.4 output is push-pull
 116   1               - P1.5 output is push-pull
 117   1               - P1.6 output is push-pull
 118   1               - P1.7 output is open-drain
 119   1               ***********************************************************************/
 120   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 121   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 122   1                              | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
 123   1                              | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__OPEN_DRAIN;
 124   1              // [P1MDOUT - Port 1 Output Mode]$
 125   1      
 126   1              // $[P1MDIN - Port 1 Input Mode]
 127   1              // [P1MDIN - Port 1 Input Mode]$
 128   1      
 129   1              // $[P1SKIP - Port 1 Skip]
 130   1              /***********************************************************************
 131   1               - P1.0 pin is not skipped by the crossbar
 132   1               - P1.1 pin is not skipped by the crossbar
 133   1               - P1.2 pin is not skipped by the crossbar
 134   1               - P1.3 pin is not skipped by the crossbar
 135   1               - P1.4 pin is skipped by the crossbar
 136   1               - P1.5 pin is skipped by the crossbar
 137   1               - P1.6 pin is skipped by the crossbar
 138   1               - P1.7 pin is not skipped by the crossbar
 139   1               ***********************************************************************/
 140   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED
 141   1                              | P1SKIP_B2__NOT_SKIPPED | P1SKIP_B3__NOT_SKIPPED
 142   1                              | P1SKIP_B4__SKIPPED | P1SKIP_B5__SKIPPED | P1SKIP_B6__SKIPPED
 143   1                              | P1SKIP_B7__NOT_SKIPPED;
 144   1              // [P1SKIP - Port 1 Skip]$
 145   1      
 146   1              // $[P1MASK - Port 1 Mask]
 147   1              // [P1MASK - Port 1 Mask]$
 148   1      
 149   1              // $[P1MAT - Port 1 Match]
 150   1              // [P1MAT - Port 1 Match]$
 151   1      
 152   1      }
 153          
 154          //================================================================================
 155          // PORTS_2_enter_DefaultMode_from_RESET
 156          //================================================================================
 157          extern void PORTS_2_enter_DefaultMode_from_RESET(void) {
 158   1              // $[P2 - Port 2 Pin Latch]
 159   1              // [P2 - Port 2 Pin Latch]$
 160   1      
 161   1              // $[P2MDOUT - Port 2 Output Mode]
 162   1              /*
 163   1               // B0 (Port 2 Bit 0 Output Mode) = OPEN_DRAIN (P2.0 output is open-
 164   1               //     drain.)
 165   1               // B1 (Port 2 Bit 1 Output Mode) = OPEN_DRAIN (P2.1 output is open-
 166   1               //     drain.)
 167   1               // B2 (Port 2 Bit 2 Output Mode) = OPEN_DRAIN (P2.2 output is open-
 168   1               //     drain.)
 169   1               // B3 (Port 2 Bit 3 Output Mode) = PUSH_PULL (P2.3 output is push-pull.)
 170   1               // B4 (Port 2 Bit 4 Output Mode) = OPEN_DRAIN (P2.4 output is open-
 171   1               //     drain.)
 172   1               // B5 (Port 2 Bit 5 Output Mode) = OPEN_DRAIN (P2.5 output is open-
 173   1               //     drain.)
 174   1               // B6 (Port 2 Bit 6 Output Mode) = OPEN_DRAIN (P2.6 output is open-
 175   1               //     drain.)
 176   1               */
 177   1              P2MDOUT = P2MDOUT_B0__OPEN_DRAIN | P2MDOUT_B1__OPEN_DRAIN
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/25/2017 23:58:57 PAGE 4   

 178   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__PUSH_PULL
 179   1                              | P2MDOUT_B4__OPEN_DRAIN | P2MDOUT_B5__OPEN_DRAIN
 180   1                              | P2MDOUT_B6__OPEN_DRAIN;
 181   1              // [P2MDOUT - Port 2 Output Mode]$
 182   1      
 183   1              // $[P2MDIN - Port 2 Input Mode]
 184   1              // [P2MDIN - Port 2 Input Mode]$
 185   1      
 186   1              // $[P2SKIP - Port 2 Skip]
 187   1              /*
 188   1               // B0 (Port 2 Bit 0 Skip) = NOT_SKIPPED (P2.0 pin is not skipped by the
 189   1               //     crossbar.)
 190   1               // B1 (Port 2 Bit 1 Skip) = NOT_SKIPPED (P2.1 pin is not skipped by the
 191   1               //     crossbar.)
 192   1               // B2 (Port 2 Bit 2 Skip) = NOT_SKIPPED (P2.2 pin is not skipped by the
 193   1               //     crossbar.)
 194   1               // B3 (Port 2 Bit 3 Skip) = SKIPPED (P2.3 pin is skipped by the
 195   1               //     crossbar.)
 196   1               */
 197   1              SFRPAGE = 0x20;
 198   1              P2SKIP = P2SKIP_B0__NOT_SKIPPED | P2SKIP_B1__NOT_SKIPPED
 199   1                              | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__SKIPPED;
 200   1              // [P2SKIP - Port 2 Skip]$
 201   1      
 202   1              // $[P2MASK - Port 2 Mask]
 203   1              // [P2MASK - Port 2 Mask]$
 204   1      
 205   1              // $[P2MAT - Port 2 Match]
 206   1              // [P2MAT - Port 2 Match]$
 207   1      
 208   1      }
 209          
 210          //================================================================================
 211          // PBCFG_0_enter_DefaultMode_from_RESET
 212          //================================================================================
 213          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 214   1              // $[XBR2 - Port I/O Crossbar 2]
 215   1              /***********************************************************************
 216   1               - Weak Pullups enabled 
 217   1               - Crossbar enabled
 218   1               - UART1 I/O unavailable at Port pin
 219   1               - UART1 RTS1 unavailable at Port pin
 220   1               - UART1 CTS1 unavailable at Port pin
 221   1               ***********************************************************************/
 222   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 223   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 224   1                              | XBR2_URT1CTSE__DISABLED;
 225   1              // [XBR2 - Port I/O Crossbar 2]$
 226   1      
 227   1              // $[PRTDRV - Port Drive Strength]
 228   1              // [PRTDRV - Port Drive Strength]$
 229   1      
 230   1              // $[XBR0 - Port I/O Crossbar 0]
 231   1              // [XBR0 - Port I/O Crossbar 0]$
 232   1      
 233   1              // $[XBR1 - Port I/O Crossbar 1]
 234   1              // [XBR1 - Port I/O Crossbar 1]$
 235   1      
 236   1      }
 237          
 238          //================================================================================
 239          // CLOCK_0_enter_DefaultMode_from_RESET
 240          //================================================================================
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/25/2017 23:58:57 PAGE 5   

 241          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 242   1              // $[HFOSC1 Setup]
 243   1              // [HFOSC1 Setup]$
 244   1      
 245   1              // $[CLKSEL - Clock Select]
 246   1              /*
 247   1               // CLKSL (Clock Source Select) = HFOSC0 (Clock derived from the Internal
 248   1               //     High Frequency Oscillator 0.)
 249   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 250   1               //     selected clock source divided by 1.)
 251   1               // CLKSL (Clock Source Select) = HFOSC0 (Clock derived from the Internal
 252   1               //     High Frequency Oscillator 0.)
 253   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 254   1               //     selected clock source divided by 1.)
 255   1               */
 256   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 257   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 258   1              while (CLKSEL & CLKSEL_DIVRDY__BMASK == CLKSEL_DIVRDY__NOT_READY)
 259   1                      ;
 260   1              // [CLKSEL - Clock Select]$
 261   1      
 262   1      }
 263          
 264          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 265   1              // $[CKCON0 - Clock Control 0]
 266   1              /*
 267   1               // SCA (Timer 0/1 Prescale) = SYSCLK_DIV_12 (System clock divided by 12.)
 268   1               // T0M (Timer 0 Clock Select) = PRESCALE (Counter/Timer 0 uses the clock
 269   1               //     defined by the prescale field, SCA.)
 270   1               // T2MH (Timer 2 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 high
 271   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 272   1               // T2ML (Timer 2 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 low
 273   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 274   1               // T3MH (Timer 3 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 high
 275   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 276   1               // T3ML (Timer 3 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 low
 277   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 278   1               // T1M (Timer 1 Clock Select) = SYSCLK (Timer 1 uses the system clock.)
 279   1               */
 280   1              SFRPAGE = 0x00;
 281   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 282   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 283   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 284   1                              | CKCON0_T1M__SYSCLK;
 285   1              // [CKCON0 - Clock Control 0]$
 286   1      
 287   1              // $[CKCON1 - Clock Control 1]
 288   1              // [CKCON1 - Clock Control 1]$
 289   1      
 290   1              // $[TMOD - Timer 0/1 Mode]
 291   1              /*
 292   1               // T0M (Timer 0 Mode Select) = MODE0 (Mode 0, 13-bit Counter/Timer)
 293   1               // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 294   1               //     Auto-Reload)
 295   1               // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 296   1               //     on the clock defined by T0M in the CKCON0 register.)
 297   1               // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 298   1               //     irrespective of INT0 logic level.)
 299   1               // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 300   1               //     on the clock defined by T1M in the CKCON0 register.)
 301   1               // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 302   1               //     irrespective of INT1 logic level.)
 303   1               */
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/25/2017 23:58:57 PAGE 6   

 304   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 305   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 306   1              // [TMOD - Timer 0/1 Mode]$
 307   1      
 308   1              // $[TCON - Timer 0/1 Control]
 309   1              /*
 310   1               // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 311   1               */
 312   1              TCON |= TCON_TR1__RUN;
 313   1              // [TCON - Timer 0/1 Control]$
 314   1      
 315   1      }
 316          
 317          //================================================================================
 318          // INTERRUPT_0_enter_DefaultMode_from_RESET
 319          //================================================================================
 320          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 321   1              // $[EIE1 - Extended Interrupt Enable 1]
 322   1              // [EIE1 - Extended Interrupt Enable 1]$
 323   1      
 324   1              // $[EIE2 - Extended Interrupt Enable 2]
 325   1              // [EIE2 - Extended Interrupt Enable 2]$
 326   1      
 327   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 328   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 329   1      
 330   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 331   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 332   1      
 333   1              // $[EIP2 - Extended Interrupt Priority 2]
 334   1              // [EIP2 - Extended Interrupt Priority 2]$
 335   1      
 336   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 337   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 338   1      
 339   1              // $[IE - Interrupt Enable]
 340   1              /***********************************************************************
 341   1               - Enable each interrupt according to its individual mask setting
 342   1               - Disable external interrupt 0
 343   1               - Disable external interrupt 1
 344   1               - Disable all SPI0 interrupts
 345   1               - Disable all Timer 0 interrupt
 346   1               - Disable all Timer 1 interrupt
 347   1               - Enable interrupt requests generated by the TF2L or TF2H flags
 348   1               - Disable UART0 interrupt
 349   1               ***********************************************************************/
 350   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 351   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 352   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 353   1              // [IE - Interrupt Enable]$
 354   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 355   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 356   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 357   1      
 358   1              // $[IP - Interrupt Priority]
 359   1              // [IP - Interrupt Priority]$
 360   1      
 361   1              // $[IPH - Interrupt Priority High]
 362   1              // [IPH - Interrupt Priority High]$
 363   1      
 364   1      }
 365          
 366          //================================================================================
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/25/2017 23:58:57 PAGE 7   

 367          // TIMER16_2_enter_DefaultMode_from_RESET
 368          //================================================================================
 369          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 370   1              // $[Timer Initialization]
 371   1              // Save Timer Configuration
 372   1              uint8_t TMR2CN0_TR2_save;
 373   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 374   1              // Stop Timer
 375   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 376   1              // [Timer Initialization]$
 377   1      
 378   1              // $[TMR2CN1 - Timer 2 Control 1]
 379   1              // [TMR2CN1 - Timer 2 Control 1]$
 380   1      
 381   1              // $[TMR2CN0 - Timer 2 Control]
 382   1              // [TMR2CN0 - Timer 2 Control]$
 383   1      
 384   1              // $[TMR2H - Timer 2 High Byte]
 385   1              // [TMR2H - Timer 2 High Byte]$
 386   1      
 387   1              // $[TMR2L - Timer 2 Low Byte]
 388   1              // [TMR2L - Timer 2 Low Byte]$
 389   1      
 390   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 391   1              /***********************************************************************
 392   1               - Timer 2 Reload High Byte = 0x38
 393   1               ***********************************************************************/
 394   1              TMR2RLH = (0x38 << TMR2RLH_TMR2RLH__SHIFT);
 395   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 396   1      
 397   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 398   1              /***********************************************************************
 399   1               - Timer 2 Reload Low Byte = 0x9E
 400   1               ***********************************************************************/
 401   1              TMR2RLL = (0x9E << TMR2RLL_TMR2RLL__SHIFT);
 402   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 403   1      
 404   1              // $[TMR2CN0]
 405   1              /***********************************************************************
 406   1               - Start Timer 2 running
 407   1               ***********************************************************************/
 408   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 409   1              // [TMR2CN0]$
 410   1      
 411   1              // $[Timer Restoration]
 412   1              // Restore Timer Configuration
 413   1              TMR2CN0 |= TMR2CN0_TR2_save;
 414   1              // [Timer Restoration]$
 415   1      
 416   1      }
 417          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    108    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/25/2017 23:58:57 PAGE 8   

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
